---
# bastion-install tasks

- name: Create directory for bastion config
  ansible.builtin.file:
    path: "{{ bastion_cluster_config_dir }}"
    state: directory
    mode: "0755"

- name: Install packages
  ansible.builtin.yum:
    name:
    - dnsmasq
    - frr
    - git
    - golang-bin
    - httpd
    - httpd-tools
    - ipmitool
    - iproute-tc
    - iptables-services
    - jq
    - make
    - net-tools
    - python3-pip
    - podman
    - rsync
    - skopeo
    - tcpdump
    - tmux
    - vim
    state: present
    update_cache: true
    disable_gpg_check: true

- name: Install python
  ansible.builtin.pip:
    name: python-hpilo
    executable: pip3

- name: Scale / Alias lab bastion tasks
  when:
    - lab in rh_labs
    - not lab == "byol"
  block:
  - name: Clean lab interfaces
    ansible.builtin.shell: |
      /root/clean-interfaces.sh --nuke

  - name: Restart NetworkManager to remove lab interfaces
    ansible.builtin.systemd:
      state: restarted
      name: NetworkManager

  - name: Create ssh key pair
    ansible.builtin.command:
      cmd: ssh-keygen -q -t rsa -f {{ ssh_key_path }} -C "" -N ""
      creates: "{{ ssh_key_path }}"
    vars:
       ssh_key_path: /root/.ssh/id_rsa

  - name: Setup chronyd
    ansible.builtin.template:
      src: chrony.conf.j2
      dest: /etc/chrony.conf
      backup: true
      mode: "0644"

  - name: Ensure chronyd is running with new configuration
    ansible.builtin.systemd:
      state: restarted
      enabled: true
      name: chronyd

  - name: Install kernel modules
    ansible.builtin.yum:
      name:
      - kernel-modules-extra
      - kernel-debug-modules-extra
      state: present
      update_cache: true
      disable_gpg_check: true
    register: kernel_modules_installed
    when: bastion_install_tc_reboot

  - name: Reboot if kernel modules installed
    when:
    - bastion_install_tc_reboot
    - kernel_modules_installed.changed
    block:
    - name: Reboot bastion
      ansible.builtin.shell: sleep 5; reboot now
      async: 1
      poll: 0
      ignore_errors: true

    - name: Wait for machine rebooting
      ansible.builtin.wait_for:
        port: 22
        delay: 2
        state: stopped
        host: "{{ inventory_hostname }}"
      delegate_to: localhost

    - name: Wait for machine to be ready after reboot
      ansible.builtin.wait_for_connection:
        delay: 120
        timeout: 1200

# bastion-install tasks
- name: IBMcloud bastion install tasks
  when: lab in cloud_labs
  block:
  - name: Copy ssh keys to bastion
    ansible.builtin.copy:
      content: "{{ item.content }}"
      dest: "{{ item.dest }}"
      mode: "{{ item.mode }}"
    loop:
    - content: "{{ lookup('file', ssh_private_key_file) + '\n' }}"
      dest: /root/.ssh/id_rsa
      mode: "0600"
    - content: "{{ lookup('file', ssh_public_key_file) }}"
      dest: /root/.ssh/id_rsa.pub
      mode: "0644"

- name: Supermicro tool tasks
  when: supermicro_nodes | default(true)
  block:
    - name: Check if SMCIPMITool tar is downloaded
      ansible.builtin.stat:
        path: "{{ playbook_dir }}/smcipmitool.tar.gz"
      delegate_to: localhost
      register: stat_smcipmitool

    # This is "proxied", assuming your local laptop can reach the smcipmitool URL
    # and that the bastion machine may not (Ex you copy the smcipmitool tar file
    # to a local lab machine)
    - name: Get SMCIPMITool
      ansible.builtin.get_url:
        validate_certs: false
        force: true
        url: "{{ smcipmitool_url }}"
        dest: "{{ playbook_dir }}/smcipmitool.tar.gz"
        mode: "0644"
      delegate_to: localhost
      when: not stat_smcipmitool.stat.exists

    - name: Untar SMCIPMITool
      ansible.builtin.unarchive:
        src: "{{ playbook_dir }}/smcipmitool.tar.gz"
        dest: /usr/local/bin
        mode: "0700"
        extra_opts:
          - --strip-components=1

- name: Get CoreDNS, OpenShift clients, opm, kube-burner, grpcurl, minio client, and yq
  ansible.builtin.get_url:
    validate_certs: false
    force: false
    url: "{{ app.url }}"
    dest: "{{ app.dest }}"
    mode: "{{ app.mode | default('0644') }}"
    checksum: "{{ app.checksum | default(omit) }}"
  loop: "{{ helper_applications }}"
  loop_control:
    loop_var: app

- name: Get rhel8 opm
  ansible.builtin.get_url:
    validate_certs: false
    force: true
    url: "{{ item.url }}"
    dest: "{{ item.dest }}"
    mode: "0644"
  with_items:
  - url: "{{ openshift_clients_base_url }}/latest-4.14/opm-linux.tar.gz"
    dest: "{{ bastion_cluster_config_dir }}/opm-linux.tar.gz"
  when: ansible_facts['distribution_major_version'] is version('8', '==')

- name: Get rhel9 opm
  ansible.builtin.get_url:
    validate_certs: false
    force: true
    url: "{{ item.url }}"
    dest: "{{ item.dest }}"
    mode: "0644"
  with_items:
  - url: "{{ openshift_clients_base_url }}/latest/opm-linux.tar.gz"
    dest: "{{ bastion_cluster_config_dir }}/opm-linux.tar.gz"
  when: ansible_facts['distribution_major_version'] is version('9', '==')

# We rename oc/kubectl clients as oc.latest and kubectl.latest since they are
# likely not the actual version of the intended cluster, those specific clients
# are obtained during the bastion-ocp-version role in which we use oc.latest to
# extract the correct oc/kubectl clients for that version. Unfortunately we need
# an oc client in order to do that so we just use the latest public oc client
- name: Untar oc/kubectl clients
  ansible.builtin.unarchive:
    src: "{{ bastion_cluster_config_dir }}/openshift-client-linux.tar.gz"
    dest: "{{ bastion_cluster_config_dir }}"
    remote_src: true
    mode: "0700"

- name: Copy oc/kubectl clients into a pathed directory
  ansible.builtin.copy:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    remote_src: true
    mode: "0700"
  loop:
  - src: "{{ bastion_cluster_config_dir }}/oc"
    dest: /usr/local/bin/oc.latest
  - src: "{{ bastion_cluster_config_dir }}/kubectl"
    dest: /usr/local/bin/kubectl.latest

- name: Untar coredns, opm, kube-burner and grpcurl client
  ansible.builtin.unarchive:
    src: "{{ item }}"
    dest: /usr/local/bin
    remote_src: true
    mode: "0700"
  loop:
  - "{{ bastion_cluster_config_dir }}/coredns_linux_amd64.tgz"
  - "{{ bastion_cluster_config_dir }}/opm-linux.tar.gz"
  - "{{ bastion_cluster_config_dir }}/oc-mirror.tar.gz"
  - "{{ bastion_cluster_config_dir }}/kube-burner-linux.tar.gz"
  - "{{ bastion_cluster_config_dir }}/grpcurl-linux.tar.gz"

- name: Untar yq tool
  ansible.builtin.unarchive:
    src: "{{ bastion_cluster_config_dir }}/yq_linux_amd64.tar.gz"
    dest: "{{ bastion_cluster_config_dir }}"
    remote_src: true
    mode: "0700"

- name: Copy yq tool into a pathed directory
  ansible.builtin.copy:
    src: "{{ bastion_cluster_config_dir }}/yq_linux_amd64"
    dest: /usr/local/bin/yq
    remote_src: true
    mode: "0700"

- name: Download promdump
  ansible.builtin.get_url:
    url: "{{ promdump_url }}"
    dest: "{{ promdump_tarball }}"
    mode: "0644"

- name: Untar promdump
  ansible.builtin.unarchive:
    src: "{{ promdump_tarball }}"
    dest: /usr/local/bin
    remote_src: true

- name: Remove promdump tarball
  ansible.builtin.file:
    path: "{{ promdump_tarball }}"
    state: absent

- name: Download Red Hat Crucible
  ansible.builtin.git:
    repo: "{{ rh_crucible_url }}"
    dest: /tmp/crucible
  environment:
    GIT_SSL_NO_VERIFY: "False"
  when: install_rh_crucible

- name: Install Red Hat Crucible
  command: chdir=/tmp/crucible bash rh-install-crucible.sh
  when: install_rh_crucible
